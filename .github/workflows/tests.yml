name: Tests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'src/satellite/**'
      - 'src/orbiter/**'
      - 'src/console/**'
      - 'src/observatory/**'
      - 'src/mission_control/**'
      - 'src/sputnik/**'
      - 'src/libs/**'
      - 'src/tests/**'
      - 'src/e2e/**'
      - 'rust-toolchain.toml'
      - 'Cargo.toml'
      - 'docker/**'
      - 'Dockerfile'
      - 'package-lock.json'

jobs:
  docker-build-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Base Docker Image
        uses: ./.github/actions/docker-build-base

  docker-build:
    runs-on: ubuntu-latest
    needs: docker-build-base

    strategy:
      matrix:
        include:
          - name: satellite
            wasm: satellite.wasm.gz
            target: scratch_satellite

          - name: orbiter
            wasm: orbiter.wasm.gz
            target: scratch_orbiter

          - name: console
            wasm: console.wasm.gz
            target: scratch_console

          - name: observatory
            wasm: observatory.wasm.gz
            target: scratch_observatory

          - name: mission_control
            wasm: mission_control.wasm.gz
            target: scratch_mission_control

          - name: sputnik
            wasm: sputnik.wasm.gz
            target: scratch_sputnik

          - name: test_satellite
            wasm: test_satellite.wasm.gz
            target: scratch_test_satellite

          - name: test_sputnik
            wasm: test_sputnik.wasm.gz
            target: scratch_test_sputnik

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and upload ${{ matrix.name }}
        uses: ./.github/actions/docker-build
        with:
          name: ${{ matrix.name }}
          wasm: ${{ matrix.wasm }}
          target: ${{ matrix.target }}

  tests:
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6]
        shardTotal: [6]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Download WASM Artifacts
        uses: ./.github/actions/download-wasms

      - name: Tests
        run: npm run test -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

  e2e:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Prepare Playwright
        run: npm run e2e:playwright:install

      - name: Download WASM Artifacts
        uses: ./.github/actions/download-wasms
        with:
          path: ./target/deploy

      - name: Run emulator
        run: |
          set -e
          npm run emulator --headless &
          npm run emulator:wait
          node ./scripts/console.upgrade.mjs --headless

      - name: E2E tests
        run: npm run e2e:ci

  may-merge:
    needs: ['tests', 'e2e']
    runs-on: ubuntu-latest
    steps:
      - name: Cleared for merging
        run: echo OK
