#!/usr/bin/env bash

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Build Juno Canister"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies] [--mission_control] [--satellite] [--console] [--observatory] [--orbiter]

Options:
  --only-dependencies          only build rust dependencies (no js build, no wasm optimization)
  --mission_control            build the mission_control canister (default)
  --satellite                  build the satellite canister
  --console                    build the console canister
  --observatory                build the observatory canister
  --orbiter                    build the orbiter canister
EOF
}

function help() {
    cat << EOF

Build the Mission Control, Satellite, Orbiter, Observatory or Console canister.

NOTE: This requires a working rust toolchain as well as ic-wasm.
EOF

}

ONLY_DEPS=
CANISTER=

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        --mission_control)
            CANISTER="mission_control"
            break
            ;;
        --satellite)
            CANISTER="satellite"
            break
            ;;
        --console)
            CANISTER="console"
            break
            ;;
        --observatory)
            CANISTER="observatory"
            break
            ;;
        --orbiter)
            CANISTER="orbiter"
            break
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

# build Mission Control by default
if [ ${#CANISTER} -eq 0 ]; then
    CANISTER=("mission_control")
fi

# Checking for dependencies
if [[ ! "$(command -v ic-wasm)" || "$(ic-wasm --version)" != "ic-wasm 0.8.5" ]]
then
    echo "could not find ic-wasm 0.8.5"
    echo "ic-wasm version 0.8.5 is needed, please run the following command:"
    echo "  cargo install ic-wasm --version 0.8.5"
    exit 1
fi

# Builds a single canister
function build_canister() {
    local canister=$1
    shift
    local extra_build_args=("$@")

    echo "Building $canister"
    echo

    SRC_DIR="$PWD/src/$canister"
    TARGET="wasm32-unknown-unknown"
    # standardize source references
    CARGO_HOME="${CARGO_HOME:-"$HOME/.cargo"}"
    RUSTFLAGS="--remap-path-prefix $CARGO_HOME=/cargo -C link-args=-zstack-size=3000000"

    cargo_build_args=(
        --manifest-path "$SRC_DIR/Cargo.toml"
        --target "$TARGET"
        --release
        --locked
        -j1
        )
    # XXX: for bash > 4.4, empty arrays are considered unset, so do some substitution
    cargo_build_args+=(${extra_build_args[@]+"${extra_build_args[@]}"})

    echo Running cargo build "${cargo_build_args[@]}"
    echo RUSTFLAGS: "$RUSTFLAGS"

    RUSTFLAGS="$RUSTFLAGS" cargo build "${cargo_build_args[@]}"

    if [ "$ONLY_DEPS" != "1" ]
    then
      CARGO_TARGET_DIR="${CARGO_TARGET_DIR:-$SRC_DIR/../../target/}"

      # Generate did file
      candid-extractor "$CARGO_TARGET_DIR/$TARGET/release/$canister.wasm" > "./$canister.did"

      # Optimize WASM and set metadata
      ic-wasm \
          "$CARGO_TARGET_DIR/$TARGET/release/$canister.wasm" \
          -o "./$canister.wasm" \
          shrink \
          --keep-name-section

      # adds the content of $canister.did to the `icp:public candid:service` custom section of the public metadata in the wasm
      ic-wasm "$canister.wasm" -o "$canister.wasm" metadata candid:service -f "$SRC_DIR/$canister.did" -v public --keep-name-section

      if [ "$canister" == "satellite" ]
      then
        # add the type of build "stock" to the satellite. This way, we can identify whether it's the standard canister ("stock") or a custom build ("extended") of the developer.
        ic-wasm "$canister.wasm" -o "$canister.wasm" metadata juno:build -d "stock" -v public --keep-name-section
      fi

      if [ "$canister" == "satellite" ] || [ "$canister" == "console" ];
      then
        # indicate support for certificate version 1 and 2 in the canister metadata
        ic-wasm "$canister.wasm" -o "$canister.wasm" metadata supported_certificate_versions -d "1,2" -v public --keep-name-section
      fi

      gzip --no-name --force "./$canister.wasm"
    fi
}

build_canister "$CANISTER"
