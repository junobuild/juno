#!/usr/bin/env bash

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Builds Juno Canisters"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies] [--mission_control] [--satellite] [--console] [--observatory]

Options:
  --only-dependencies          only build rust dependencies (no js build, no wasm optimization)
  --mission_control            build the mission_control canister (default)
  --satellite                  build the satellite canister
  --console                    build the console canister
  --observatory                build the observatory canister
EOF
}

function help() {
    cat << EOF

Builds the Mission Control, Satellite and Console canisters.

NOTE: This requires a working rust toolchain as well as ic-cdk-optimizer.
EOF

}

ONLY_DEPS=
CANISTERS=()

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        --mission_control)
            CANISTERS+=("mission_control")
            shift
            ;;
        --satellite)
            CANISTERS+=("satellite")
            shift
            ;;
        --console)
            CANISTERS+=("console")
            shift
            ;;
        --observatory)
            CANISTERS+=("observatory")
            shift
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

# build Mission Control by default
if [ ${#CANISTERS[@]} -eq 0 ]; then
    CANISTERS=("mission_control")
fi

# Checking for dependencies
if [[ ! "$(command -v ic-cdk-optimizer)" || "$(ic-cdk-optimizer --version)" != "ic-cdk-optimizer 0.3.4" ]]
then
    echo "could not find ic-cdk-optimizer 0.3.4"
    echo "ic-cdk-optimizer version 0.3.4 is needed, please run the following command:"
    echo "  cargo install ic-cdk-optimizer --version 0.3.4"
    exit 1
fi

# Builds a single canister
function build_canister() {
    local canister=$1
    shift
    local extra_build_args=("$@")

    echo "Building $canister"
    echo

    SRC_DIR="$PWD/src/$canister"
    TARGET="wasm32-unknown-unknown"
    # standardize source references
    CARGO_HOME="${CARGO_HOME:-"$HOME/.cargo"}"
    RUSTFLAGS="--remap-path-prefix $CARGO_HOME=/cargo"

    cargo_build_args=(
        --manifest-path "$SRC_DIR/Cargo.toml"
        --target "$TARGET"
        --release
        -j1
        )
    # XXX: for bash > 4.4, empty arrays are considered unset, so do some substitution
    cargo_build_args+=(${extra_build_args[@]+"${extra_build_args[@]}"})

    echo Running cargo build "${cargo_build_args[@]}"
    echo RUSTFLAGS: "$RUSTFLAGS"

    RUSTFLAGS="$RUSTFLAGS" cargo build "${cargo_build_args[@]}"

    if [ "$ONLY_DEPS" != "1" ]
    then
        CARGO_TARGET_DIR="${CARGO_TARGET_DIR:-$SRC_DIR/../../target/}"

        ic-cdk-optimizer \
            "$CARGO_TARGET_DIR/$TARGET/release/$canister.wasm" \
            -o "./$canister.wasm"

        gzip "./$canister.wasm"
    fi
}

for canister in "${CANISTERS[@]}"
do
  build_canister "$canister"
done
