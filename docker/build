#!/usr/bin/env bash

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Build Juno Canister"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies] [--mission_control] [--satellite] [--console] [--observatory] [--orbiter] [--sputnik] [--test_satellite] [--test_sputnik]

Options:
  --only-dependencies          only build rust dependencies (no js build, no wasm optimization)
  --mission_control            build the mission_control canister (default)
  --satellite                  build the satellite canister
  --console                    build the console canister
  --observatory                build the observatory canister
  --orbiter                    build the orbiter canister
  --sputnik                    build the sputnik canister
  --test_satellite             build the satellite canister used for testing purposes
  --test_sputnik               build the sputnik canister for testing purposes
EOF
}

function help() {
    cat << EOF

Build the Mission Control, Satellite, Orbiter, Observatory or Console canister.

NOTE: This requires a working rust toolchain as well as ic-wasm.
EOF

}

ONLY_DEPS=
CANISTER=
OUTPUT=

# Candid metadata supported_certificate_versions 1 and 2
WITH_CERTIFICATION=0
# Source directory where to find $CANISTER/Cargo.toml
SRC_ROOT_DIR="$PWD/src"
# Source directory where to find $CANISTER/juno.package.json
PKG_JSON_DIR=
# Default target is wasm32-unknown-unknown
TARGET=wasm32-unknown-unknown

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        --mission_control)
            CANISTER="mission_control"
            break
            ;;
        --satellite)
            CANISTER="satellite"
            WITH_CERTIFICATION=1
            break
            ;;
        --console)
            CANISTER="console"
            WITH_CERTIFICATION=1
            break
            ;;
        --observatory)
            CANISTER="observatory"
            break
            ;;
        --orbiter)
            CANISTER="orbiter"
            break
            ;;
        --test_sputnik)
            CANISTER="sputnik"
            OUTPUT="test_sputnik"
            WITH_CERTIFICATION=1
            TARGET="wasm32-wasip1"
            PKG_JSON_DIR="$PWD/src/tests/fixtures/$OUTPUT"
            break
            ;;
        --sputnik)
            CANISTER="sputnik"
            WITH_CERTIFICATION=1
            TARGET="wasm32-wasip1"
            break
            ;;
        --test_satellite)
            CANISTER="test_satellite"
            WITH_CERTIFICATION=1
            SRC_ROOT_DIR="$PWD/src/tests/fixtures"
            PKG_JSON_DIR="$PWD/src/tests/fixtures/$CANISTER"
            break
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

# build Mission Control by default
if [ ${#CANISTER} -eq 0 ]; then
    CANISTER="mission_control"
fi

# if not set the default package.json path to search for is the source of the canister
if [ ${#PKG_JSON_DIR} -eq 0 ]; then
    PKG_JSON_DIR="$SRC_ROOT_DIR/$CANISTER"
fi

# Source the script to prepare the package.json metadata for the canister
source "$SCRIPTS_DIR/prepare-package"

create_canister_package_json "$CANISTER" "$SRC_ROOT_DIR" "$PWD/src" "$PKG_JSON_DIR" "$OUTPUT"

# Source the script to perform tasks before building the canister
source "$SCRIPTS_DIR/pre-build-canister"

pre_build_canister "$@"

# Source the script to effectively build the canister
source "$SCRIPTS_DIR/build-canister"

build_canister "$CANISTER" "$SRC_ROOT_DIR" "$PKG_JSON_DIR" "." "$ONLY_DEPS" "$WITH_CERTIFICATION" "$TARGET"

# We rename the output if set and different from the canister name. Useful for test_sputnik which is the same canister built with different resources.
if [ -n "$OUTPUT" ] && [ "$OUTPUT" != "$CANISTER" ]; then
  mv "./$CANISTER.wasm.gz" "./$OUTPUT.wasm.gz"
fi