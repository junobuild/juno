import { readFileSync, writeFileSync } from 'node:fs';
import { join } from 'path';

/**
 * Fixes broken relative modulepreload paths in root HTML pages.
 *
 * It converts for example:
 * <link rel="modulepreload" href="./_app/immutable/chunks/CTkrn1eG.js">
 *
 * To:
 * <link rel="modulepreload" href="/_app/immutable/chunks/CTkrn1eG.js">
 *
 * Notes:
 * When using `fallback: 'index.html'` in `svelte.config.js` (which was the original way of configuring the frontend),
 * absolute paths like "/_app/..." are generated by default within the output file (and not "./_app/").
 * The issue arises when that fallback is removed or set to undefined.
 *
 * We could set the fallback to `'404.html'`, but then the `index.html` page would also need to be rewritten to support that behavior.
 * Therefore, any standalone HTML file at the root must be processed by this script to ensure correct asset loading.
 */
const cleanModulePreload = (htmlFile) => {
	const contentHtml = readFileSync(htmlFile, 'utf-8');

	const modulepreload = /<link\s+rel="modulepreload"([\s\S]*?)href="\.\.?(\/?_app\/[^"]+)"/gim;

	const contentHtmlWithFixedAppPath = contentHtml.replace(
		modulepreload,
		(_match, attrs, href) => `<link rel="modulepreload"${attrs}href="${href}"`
	);

	writeFileSync(htmlFile, contentHtmlWithFixedAppPath);
};

const dir = join(process.cwd(), 'build');

const html404 = join(dir, '404.html');
const htmlIndex = join(dir, 'index.html');

[htmlIndex, html404].forEach((html) => cleanModulePreload(html));
