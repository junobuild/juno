type AssertMissionControlCenterArgs = record {
  mission_control_id : principal;
  user : principal;
};
type AssetEncodingNoContent = record {
  modified : nat64;
  sha256 : blob;
  total_length : nat;
};
type AssetKey = record {
  token : opt text;
  collection : text;
  owner : principal;
  name : text;
  description : opt text;
  full_path : text;
};
type AssetNoContent = record {
  key : AssetKey;
  updated_at : nat64;
  encodings : vec record { text; AssetEncodingNoContent };
  headers : vec record { text; text };
  created_at : nat64;
  version : opt nat64;
};
type AssetsUpgradeOptions = record { clear_existing_assets : opt bool };
type AuthenticateUserArgs = variant { OpenId : OpenIdDelegationArgs };
type AuthenticateUserError = variant {
  PrepareDelegation : PrepareDelegationError;
};
type AuthenticatedUser = record { public_key : blob };
type AuthenticationConfig = record {
  updated_at : opt nat64;
  openid : opt AuthenticationConfigOpenId;
  created_at : opt nat64;
  version : opt nat64;
  internet_identity : opt AuthenticationConfigInternetIdentity;
  rules : opt AuthenticationRules;
};
type AuthenticationConfigInternetIdentity = record {
  derivation_origin : opt text;
  external_alternative_origins : opt vec text;
};
type AuthenticationConfigOpenId = record {
  observatory_id : opt principal;
  delegation : opt AuthenticationConfigOpenIdDelegation;
  providers : vec record { OpenIdProvider; OpenIdProviderConfig };
};
type AuthenticationConfigOpenIdDelegation = record {
  targets : opt vec principal;
  max_time_to_live : opt nat64;
};
type AuthenticationRules = record { allowed_callers : vec principal };
type CommitBatch = record {
  batch_id : nat;
  headers : vec record { text; text };
  chunk_ids : vec nat;
};
type CommitProposal = record { sha256 : blob; proposal_id : nat };
type Config = record {
  authentication : opt AuthenticationConfig;
  storage : StorageConfig;
};
type ConfigMaxMemorySize = record { stable : opt nat64; heap : opt nat64 };
type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin; Submit };
type CreateCanisterArgs = record {
  block_index : opt nat64;
  subnet_id : opt principal;
  user : principal;
};
type CreateSatelliteArgs = record {
  block_index : opt nat64;
  subnet_id : opt principal;
  storage : opt InitStorageArgs;
  user : principal;
};
type CustomDomain = record {
  updated_at : nat64;
  created_at : nat64;
  version : opt nat64;
  bn_id : opt text;
};
type Delegation = record {
  pubkey : blob;
  targets : opt vec principal;
  expiration : nat64;
};
type DeleteControllersArgs = record { controllers : vec principal };
type DeleteProposalAssets = record { proposal_ids : vec nat };
type GetCreateCanisterFeeArgs = record { user : principal };
type GetDelegationArgs = variant { OpenId : OpenIdDelegationArgs };
type GetDelegationError = variant {
  JwtFindProvider : JwtFindProviderError;
  GetCachedJwks;
  NoSuchDelegation;
  JwtVerify : JwtVerifyError;
  GetOrFetchJwks : GetOrRefreshJwksError;
  DeriveSeedFailed : text;
};
type GetOrRefreshJwksError = variant {
  InvalidConfig : text;
  MissingKid;
  BadClaim : text;
  KeyNotFoundCooldown;
  CertificateNotFound;
  BadSig : text;
  MissingLastAttempt : text;
  KeyNotFound;
  FetchFailed : text;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitAssetKey = record {
  token : opt text;
  collection : text;
  name : text;
  description : opt text;
  encoding_type : opt text;
  full_path : text;
};
type InitStorageArgs = record { system_memory : opt InitStorageMemory };
type InitStorageMemory = variant { Heap; Stable };
type InitUploadResult = record { batch_id : nat };
type JwtFindProviderError = variant {
  BadClaim : text;
  BadSig : text;
  NoMatchingProvider;
};
type JwtVerifyError = variant {
  WrongKeyType;
  MissingKid;
  BadClaim : text;
  BadSig : text;
  NoKeyForKid;
};
type ListMatcher = record {
  key : opt text;
  updated_at : opt TimestampMatcher;
  description : opt text;
  created_at : opt TimestampMatcher;
};
type ListOrder = record { field : ListOrderField; desc : bool };
type ListOrderField = variant { UpdatedAt; Keys; CreatedAt };
type ListPaginate = record { start_after : opt text; limit : opt nat64 };
type ListParams = record {
  order : opt ListOrder;
  owner : opt principal;
  matcher : opt ListMatcher;
  paginate : opt ListPaginate;
};
type ListProposalResults = record {
  matches_length : nat64;
  items : vec record { ProposalKey; Proposal };
  items_length : nat64;
};
type ListProposalsOrder = record { desc : bool };
type ListProposalsPaginate = record { start_after : opt nat; limit : opt nat };
type ListProposalsParams = record {
  order : opt ListProposalsOrder;
  paginate : opt ListProposalsPaginate;
};
type ListResults = record {
  matches_pages : opt nat64;
  matches_length : nat64;
  items_page : opt nat64;
  items : vec record { text; AssetNoContent };
  items_length : nat64;
};
type Memory = variant { Heap; Stable };
type MissionControl = record {
  updated_at : nat64;
  credits : Tokens;
  mission_control_id : opt principal;
  owner : principal;
  created_at : nat64;
};
type OpenIdDelegationArgs = record {
  jwt : text;
  session_key : blob;
  salt : blob;
};
type OpenIdProvider = variant { Google };
type OpenIdProviderConfig = record { client_id : text };
type Payment = record {
  status : PaymentStatus;
  updated_at : nat64;
  block_index_payment : nat64;
  mission_control_id : opt principal;
  created_at : nat64;
  block_index_refunded : opt nat64;
};
type PaymentStatus = variant { Refunded; Acknowledged; Completed };
type PrepareDelegationError = variant {
  JwtFindProvider : JwtFindProviderError;
  GetCachedJwks;
  JwtVerify : JwtVerifyError;
  GetOrFetchJwks : GetOrRefreshJwksError;
  DeriveSeedFailed : text;
};
type Proposal = record {
  status : ProposalStatus;
  updated_at : nat64;
  sha256 : opt blob;
  executed_at : opt nat64;
  owner : principal;
  created_at : nat64;
  version : opt nat64;
  proposal_type : ProposalType;
};
type ProposalKey = record { proposal_id : nat };
type ProposalStatus = variant {
  Initialized;
  Failed;
  Open;
  Rejected;
  Executed;
  Accepted;
};
type ProposalType = variant {
  AssetsUpgrade : AssetsUpgradeOptions;
  SegmentsDeployment : SegmentsDeploymentOptions;
};
type RateConfig = record { max_tokens : nat64; time_per_token_ns : nat64 };
type Result = variant { Ok : AuthenticatedUser; Err : AuthenticateUserError };
type Result_1 = variant { Ok : SignedDelegation; Err : GetDelegationError };
type SegmentKind = variant { Orbiter; MissionControl; Satellite };
type SegmentsDeploymentOptions = record {
  orbiter : opt text;
  mission_control_version : opt text;
  satellite_version : opt text;
};
type SetAuthenticationConfig = record {
  openid : opt AuthenticationConfigOpenId;
  version : opt nat64;
  internet_identity : opt AuthenticationConfigInternetIdentity;
  rules : opt AuthenticationRules;
};
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type SetControllersArgs = record {
  controller : SetController;
  controllers : vec principal;
};
type SetStorageConfig = record {
  iframe : opt StorageConfigIFrame;
  rewrites : vec record { text; text };
  headers : vec record { text; vec record { text; text } };
  version : opt nat64;
  max_memory_size : opt ConfigMaxMemorySize;
  raw_access : opt StorageConfigRawAccess;
  redirects : opt vec record { text; StorageConfigRedirect };
};
type SignedDelegation = record { signature : blob; delegation : Delegation };
type StorageConfig = record {
  iframe : opt StorageConfigIFrame;
  updated_at : opt nat64;
  rewrites : vec record { text; text };
  headers : vec record { text; vec record { text; text } };
  created_at : opt nat64;
  version : opt nat64;
  max_memory_size : opt ConfigMaxMemorySize;
  raw_access : opt StorageConfigRawAccess;
  redirects : opt vec record { text; StorageConfigRedirect };
};
type StorageConfigIFrame = variant { Deny; AllowAny; SameOrigin };
type StorageConfigRawAccess = variant { Deny; Allow };
type StorageConfigRedirect = record { status_code : nat16; location : text };
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : blob;
};
type StreamingCallbackToken = record {
  memory : Memory;
  token : opt text;
  sha256 : opt blob;
  headers : vec record { text; text };
  index : nat64;
  encoding_type : text;
  full_path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> () query;
  };
};
type TimestampMatcher = variant {
  Equal : nat64;
  Between : record { nat64; nat64 };
  GreaterThan : nat64;
  LessThan : nat64;
};
type Tokens = record { e8s : nat64 };
type UploadChunk = record {
  content : blob;
  batch_id : nat;
  order_id : opt nat;
};
type UploadChunkResult = record { chunk_id : nat };
service : () -> {
  add_credits : (principal, Tokens) -> ();
  add_invitation_code : (text) -> ();
  assert_mission_control_center : (AssertMissionControlCenterArgs) -> () query;
  authenticate_user : (AuthenticateUserArgs) -> (Result);
  commit_proposal : (CommitProposal) -> (null);
  commit_proposal_asset_upload : (CommitBatch) -> ();
  commit_proposal_many_assets_upload : (vec CommitBatch) -> ();
  count_proposals : () -> (nat64) query;
  create_orbiter : (CreateCanisterArgs) -> (principal);
  create_satellite : (CreateSatelliteArgs) -> (principal);
  del_controllers : (DeleteControllersArgs) -> ();
  del_custom_domain : (text) -> ();
  delete_proposal_assets : (DeleteProposalAssets) -> ();
  get_auth_config : () -> (opt AuthenticationConfig) query;
  get_config : () -> (Config) query;
  get_create_orbiter_fee : (GetCreateCanisterFeeArgs) -> (opt Tokens) query;
  get_create_satellite_fee : (GetCreateCanisterFeeArgs) -> (opt Tokens) query;
  get_credits : () -> (Tokens) query;
  get_delegation : (GetDelegationArgs) -> (Result_1) query;
  get_proposal : (nat) -> (opt Proposal) query;
  get_storage_config : () -> (StorageConfig) query;
  get_user_mission_control_center : () -> (opt MissionControl) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
      StreamingCallbackHttpResponse,
    ) query;
  init_proposal : (ProposalType) -> (nat, Proposal);
  init_proposal_asset_upload : (InitAssetKey, nat) -> (InitUploadResult);
  init_proposal_many_assets_upload : (vec InitAssetKey, nat) -> (
      vec record { text; InitUploadResult },
    );
  init_user_mission_control_center : () -> (MissionControl);
  list_assets : (text, ListParams) -> (ListResults) query;
  list_controllers : () -> (vec record { principal; Controller }) query;
  list_custom_domains : () -> (vec record { text; CustomDomain }) query;
  list_payments : () -> (vec record { nat64; Payment }) query;
  list_proposals : (ListProposalsParams) -> (ListProposalResults) query;
  list_user_mission_control_centers : () -> (
      vec record { principal; MissionControl },
    ) query;
  reject_proposal : (CommitProposal) -> (null);
  set_auth_config : (SetAuthenticationConfig) -> (AuthenticationConfig);
  set_controllers : (SetControllersArgs) -> ();
  set_custom_domain : (text, opt text) -> ();
  set_fee : (SegmentKind, Tokens) -> ();
  set_storage_config : (SetStorageConfig) -> (StorageConfig);
  submit_proposal : (nat) -> (nat, Proposal);
  update_rate_config : (SegmentKind, RateConfig) -> ();
  upload_proposal_asset_chunk : (UploadChunk) -> (UploadChunkResult);
}
