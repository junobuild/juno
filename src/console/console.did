type AssertMissionControlCenterArgs = record {
  mission_control_id : principal;
  user : principal;
};
type CommitAssetsUpgrade = record { sha256 : vec nat8; proposal_id : nat };
type CommitBatch = record {
  batch_id : nat;
  headers : vec record { text; text };
  chunk_ids : vec nat;
};
type Config = record { storage : StorageConfig };
type ControllerScope = variant { Write; Admin };
type CreateCanisterArgs = record { block_index : opt nat64; user : principal };
type CustomDomain = record {
  updated_at : nat64;
  created_at : nat64;
  version : opt nat64;
  bn_id : opt text;
};
type DeleteControllersArgs = record { controllers : vec principal };
type GetCreateCanisterFeeArgs = record { user : principal };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitAssetKey = record {
  token : opt text;
  collection : text;
  name : text;
  description : opt text;
  encoding_type : opt text;
  full_path : text;
};
type InitUploadResult = record { batch_id : nat };
type LoadRelease = record { total : nat64; chunks : nat64 };
type Memory = variant { Heap; Stable };
type MissionControl = record {
  updated_at : nat64;
  credits : Tokens;
  mission_control_id : opt principal;
  owner : principal;
  created_at : nat64;
};
type Payment = record {
  status : PaymentStatus;
  updated_at : nat64;
  block_index_payment : nat64;
  mission_control_id : opt principal;
  created_at : nat64;
  block_index_refunded : opt nat64;
};
type PaymentStatus = variant { Refunded; Acknowledged; Completed };
type Proposal = record {
  status : ProposalStatus;
  updated_at : nat64;
  sha256 : opt vec nat8;
  executed_at : opt nat64;
  owner : principal;
  created_at : nat64;
  version : opt nat64;
  proposal_type : ProposalType;
};
type ProposalStatus = variant {
  Initialized;
  Failed;
  Open;
  Rejected;
  Executed;
  Accepted;
};
type ProposalType = variant { AssetsUpgrade };
type RateConfig = record { max_tokens : nat64; time_per_token_ns : nat64 };
type ReleasesVersion = record {
  satellite : opt text;
  orbiter : opt text;
  mission_control : opt text;
};
type Segment = variant { Orbiter; MissionControl; Satellite };
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type SetControllersArgs = record {
  controller : SetController;
  controllers : vec principal;
};
type StorageConfig = record {
  iframe : opt StorageConfigIFrame;
  rewrites : vec record { text; text };
  headers : vec record { text; vec record { text; text } };
  raw_access : opt StorageConfigRawAccess;
  redirects : opt vec record { text; StorageConfigRedirect };
};
type StorageConfigIFrame = variant { Deny; AllowAny; SameOrigin };
type StorageConfigRawAccess = variant { Deny; Allow };
type StorageConfigRedirect = record { status_code : nat16; location : text };
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : vec nat8;
};
type StreamingCallbackToken = record {
  memory : Memory;
  token : opt text;
  sha256 : opt vec nat8;
  headers : vec record { text; text };
  index : nat64;
  encoding_type : text;
  full_path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> () query;
  };
};
type Tokens = record { e8s : nat64 };
type UploadChunk = record {
  content : vec nat8;
  batch_id : nat;
  order_id : opt nat;
};
type UploadChunkResult = record { chunk_id : nat };
service : () -> {
  add_credits : (principal, Tokens) -> ();
  add_invitation_code : (text) -> ();
  assert_mission_control_center : (AssertMissionControlCenterArgs) -> () query;
  commit_asset_upload : (CommitBatch) -> ();
  commit_assets_upgrade : (CommitAssetsUpgrade) -> ();
  create_orbiter : (CreateCanisterArgs) -> (principal);
  create_satellite : (CreateCanisterArgs) -> (principal);
  del_controllers : (DeleteControllersArgs) -> ();
  del_custom_domain : (text) -> ();
  get_config : () -> (Config);
  get_create_orbiter_fee : (GetCreateCanisterFeeArgs) -> (opt Tokens) query;
  get_create_satellite_fee : (GetCreateCanisterFeeArgs) -> (opt Tokens) query;
  get_credits : () -> (Tokens) query;
  get_releases_version : () -> (ReleasesVersion) query;
  get_user_mission_control_center : () -> (opt MissionControl) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
      StreamingCallbackHttpResponse,
    ) query;
  init_asset_upload : (InitAssetKey, nat) -> (InitUploadResult);
  init_assets_upgrade : () -> (nat, Proposal);
  init_user_mission_control_center : () -> (MissionControl);
  list_custom_domains : () -> (vec record { text; CustomDomain }) query;
  list_payments : () -> (vec record { nat64; Payment }) query;
  list_user_mission_control_centers : () -> (
      vec record { principal; MissionControl },
    ) query;
  load_release : (Segment, vec nat8, text) -> (LoadRelease);
  propose_assets_upgrade : (nat) -> (nat, Proposal);
  reset_release : (Segment) -> ();
  set_config : (Config) -> ();
  set_controllers : (SetControllersArgs) -> ();
  set_custom_domain : (text, opt text) -> ();
  set_fee : (Segment, Tokens) -> ();
  update_rate_config : (Segment, RateConfig) -> ();
  upload_asset_chunk : (UploadChunk) -> (UploadChunkResult);
  version : () -> (text) query;
}
