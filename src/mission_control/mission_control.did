type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin };
type CronJobStatusesConfig = record {
  enabled : bool;
  cycles_threshold : opt nat64;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type DepositCyclesArgs = record { cycles : nat; destination_id : principal };
type Orbiter = record {
  updated_at : nat64;
  orbiter_id : principal;
  metadata : vec record { text; text };
  created_at : nat64;
};
type Result = variant { Ok : SegmentStatus; Err : text };
type Satellite = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  satellite_id : principal;
};
type SegmentStatus = record {
  id : principal;
  status : CanisterStatusResponse;
  metadata : opt vec record { text; text };
  status_at : nat64;
};
type SegmentsStatuses = record {
  orbiters : opt vec Result;
  satellites : opt vec Result;
  mission_control : Result;
};
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type StatusesArgs = record {
  mission_control_cycles_threshold : opt nat64;
  orbiters : vec record { principal; CronJobStatusesConfig };
  satellites : vec record { principal; CronJobStatusesConfig };
  cycles_threshold : opt nat64;
};
type Tokens = record { e8s : nat64 };
service : () -> {
  add_mission_control_controllers : (vec principal) -> ();
  add_satellites_controllers : (vec principal, vec principal) -> ();
  create_orbiter : (opt text) -> (Orbiter);
  create_satellite : (text) -> (Satellite);
  del_mission_control_controllers : (vec principal) -> ();
  del_orbiter : (principal, nat) -> ();
  del_orbiters_controllers : (vec principal, vec principal) -> ();
  del_satellite : (principal, nat) -> ();
  del_satellites_controllers : (vec principal, vec principal) -> ();
  deposit_cycles : (DepositCyclesArgs) -> ();
  get_user : () -> (principal) query;
  list_mission_control_controllers : () -> (
      vec record { principal; Controller },
    ) query;
  list_mission_control_statuses : () -> (vec record { nat64; Result }) query;
  list_orbiter_statuses : (principal) -> (
      opt vec record { nat64; Result },
    ) query;
  list_orbiters : () -> (vec record { principal; Orbiter }) query;
  list_satellite_statuses : (principal) -> (
      opt vec record { nat64; Result },
    ) query;
  list_satellites : () -> (vec record { principal; Satellite }) query;
  remove_mission_control_controllers : (vec principal) -> ();
  remove_satellites_controllers : (vec principal, vec principal) -> ();
  set_metadata : (vec record { text; text }) -> ();
  set_mission_control_controllers : (vec principal, SetController) -> ();
  set_orbiter_metadata : (principal, vec record { text; text }) -> (Orbiter);
  set_orbiters_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  set_satellite_metadata : (principal, vec record { text; text }) -> (
      Satellite,
    );
  set_satellites_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  status : (StatusesArgs) -> (SegmentsStatuses);
  top_up : (principal, Tokens) -> ();
  version : () -> (text) query;
}
