type Account = record { owner : principal; subaccount : opt blob };
type AssetEncodingNoContent = record {
  modified : nat64;
  sha256 : blob;
  total_length : nat;
};
type AssetKey = record {
  token : opt text;
  collection : text;
  owner : principal;
  name : text;
  description : opt text;
  full_path : text;
};
type AssetNoContent = record {
  key : AssetKey;
  updated_at : nat64;
  encodings : vec record { text; AssetEncodingNoContent };
  headers : vec record { text; text };
  created_at : nat64;
  version : opt nat64;
};
type AssetsUpgradeOptions = record { clear_existing_assets : opt bool };
type CommitBatch = record {
  batch_id : nat;
  headers : vec record { text; text };
  chunk_ids : vec nat;
};
type CommitProposal = record { sha256 : blob; proposal_id : nat };
type Config = record { monitoring : opt MonitoringConfig };
type ConfigMaxMemorySize = record { stable : opt nat64; heap : opt nat64 };
type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin };
type CreateCanisterConfig = record {
  subnet_id : opt principal;
  name : opt text;
};
type CustomDomain = record {
  updated_at : nat64;
  created_at : nat64;
  version : opt nat64;
  bn_id : opt text;
};
type CyclesBalance = record { timestamp : nat64; amount : nat };
type CyclesMonitoring = record {
  strategy : opt CyclesMonitoringStrategy;
  enabled : bool;
};
type CyclesMonitoringConfig = record {
  notification : opt DepositedCyclesEmailNotification;
  default_strategy : opt CyclesMonitoringStrategy;
};
type CyclesMonitoringStartConfig = record {
  orbiters_strategy : opt SegmentsMonitoringStrategy;
  mission_control_strategy : opt CyclesMonitoringStrategy;
  satellites_strategy : opt SegmentsMonitoringStrategy;
};
type CyclesMonitoringStatus = record {
  monitored_ids : vec principal;
  running : bool;
};
type CyclesMonitoringStopConfig = record {
  satellite_ids : opt vec principal;
  try_mission_control : opt bool;
  orbiter_ids : opt vec principal;
};
type CyclesMonitoringStrategy = variant { BelowThreshold : CyclesThreshold };
type CyclesThreshold = record { fund_cycles : nat; min_cycles : nat };
type DeleteProposalAssets = record { proposal_ids : vec nat };
type DepositCyclesArgs = record { cycles : nat; destination_id : principal };
type DepositedCyclesEmailNotification = record {
  to : opt text;
  enabled : bool;
};
type FundingErrorCode = variant {
  BalanceCheckFailed;
  ObtainCyclesFailed;
  DepositFailed;
  InsufficientCycles;
  Other : text;
};
type FundingFailure = record {
  timestamp : nat64;
  error_code : FundingErrorCode;
};
type GetMonitoringHistory = record {
  to : opt nat64;
  from : opt nat64;
  segment_id : principal;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitAssetKey = record {
  token : opt text;
  collection : text;
  name : text;
  description : opt text;
  encoding_type : opt text;
  full_path : text;
};
type InitUploadResult = record { batch_id : nat };
type ListMatcher = record {
  key : opt text;
  updated_at : opt TimestampMatcher;
  description : opt text;
  created_at : opt TimestampMatcher;
};
type ListOrder = record { field : ListOrderField; desc : bool };
type ListOrderField = variant { UpdatedAt; Keys; CreatedAt };
type ListPaginate = record { start_after : opt text; limit : opt nat64 };
type ListParams = record {
  order : opt ListOrder;
  owner : opt principal;
  matcher : opt ListMatcher;
  paginate : opt ListPaginate;
};
type ListResults = record {
  matches_pages : opt nat64;
  matches_length : nat64;
  items_page : opt nat64;
  items : vec record { text; AssetNoContent };
  items_length : nat64;
};
type Memory = variant { Heap; Stable };
type MissionControlSettings = record {
  updated_at : nat64;
  created_at : nat64;
  monitoring : opt Monitoring;
};
type Monitoring = record { cycles : opt CyclesMonitoring };
type MonitoringConfig = record { cycles : opt CyclesMonitoringConfig };
type MonitoringHistory = record { cycles : opt MonitoringHistoryCycles };
type MonitoringHistoryCycles = record {
  deposited_cycles : opt CyclesBalance;
  cycles : CyclesBalance;
  funding_failure : opt FundingFailure;
};
type MonitoringHistoryKey = record {
  segment_id : principal;
  created_at : nat64;
  nonce : int32;
};
type MonitoringStartConfig = record {
  cycles_config : opt CyclesMonitoringStartConfig;
};
type MonitoringStatus = record { cycles : opt CyclesMonitoringStatus };
type MonitoringStopConfig = record {
  cycles_config : opt CyclesMonitoringStopConfig;
};
type Orbiter = record {
  updated_at : nat64;
  orbiter_id : principal;
  metadata : vec record { text; text };
  created_at : nat64;
  settings : opt Settings;
};
type Proposal = record {
  status : ProposalStatus;
  updated_at : nat64;
  sha256 : opt blob;
  executed_at : opt nat64;
  owner : principal;
  created_at : nat64;
  version : opt nat64;
  proposal_type : ProposalType;
};
type ProposalStatus = variant {
  Initialized;
  Failed;
  Open;
  Rejected;
  Executed;
  Accepted;
};
type ProposalType = variant {
  AssetsUpgrade : AssetsUpgradeOptions;
  SegmentsDeployment : SegmentsDeploymentOptions;
};
type Result = variant { Ok : nat64; Err : TransferError };
type Result_1 = variant { Ok : nat; Err : TransferError_1 };
type Satellite = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  satellite_id : principal;
  settings : opt Settings;
};
type SegmentsDeploymentOptions = record {
  orbiter : opt text;
  mission_control_version : opt text;
  satellite_version : opt text;
};
type SegmentsMonitoringStrategy = record {
  ids : vec principal;
  strategy : CyclesMonitoringStrategy;
};
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type Settings = record { monitoring : opt Monitoring };
type StorageConfig = record {
  iframe : opt StorageConfigIFrame;
  rewrites : vec record { text; text };
  headers : vec record { text; vec record { text; text } };
  max_memory_size : opt ConfigMaxMemorySize;
  raw_access : opt StorageConfigRawAccess;
  redirects : opt vec record { text; StorageConfigRedirect };
};
type StorageConfigIFrame = variant { Deny; AllowAny; SameOrigin };
type StorageConfigRawAccess = variant { Deny; Allow };
type StorageConfigRedirect = record { status_code : nat16; location : text };
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : blob;
};
type StreamingCallbackToken = record {
  memory : Memory;
  token : opt text;
  sha256 : opt blob;
  headers : vec record { text; text };
  index : nat64;
  encoding_type : text;
  full_path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> () query;
  };
};
type Timestamp = record { timestamp_nanos : nat64 };
type TimestampMatcher = variant {
  Equal : nat64;
  Between : record { nat64; nat64 };
  GreaterThan : nat64;
  LessThan : nat64;
};
type Tokens = record { e8s : nat64 };
type TransferArg = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferArgs = record {
  to : blob;
  fee : Tokens;
  memo : nat64;
  from_subaccount : opt blob;
  created_at_time : opt Timestamp;
  amount : Tokens;
};
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Tokens };
};
type TransferError_1 = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type UploadChunk = record {
  content : blob;
  batch_id : nat;
  order_id : opt nat;
};
type UploadChunkResult = record { chunk_id : nat };
type User = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  user : opt principal;
  created_at : nat64;
  config : opt Config;
};
service : () -> {
  add_mission_control_controllers : (vec principal) -> ();
  add_satellites_controllers : (vec principal, vec principal) -> ();
  commit_asset_upload : (CommitBatch) -> ();
  commit_proposal : (CommitProposal) -> (null);
  create_orbiter : (opt text) -> (Orbiter);
  create_orbiter_with_config : (CreateCanisterConfig) -> (Orbiter);
  create_satellite : (text) -> (Satellite);
  create_satellite_with_config : (CreateCanisterConfig) -> (Satellite);
  del_custom_domain : (text) -> ();
  del_mission_control_controllers : (vec principal) -> ();
  del_orbiter : (principal, nat) -> ();
  del_orbiters_controllers : (vec principal, vec principal) -> ();
  del_satellite : (principal, nat) -> ();
  del_satellites_controllers : (vec principal, vec principal) -> ();
  delete_proposal_assets : (DeleteProposalAssets) -> ();
  deposit_cycles : (DepositCyclesArgs) -> ();
  get_config : () -> (opt Config) query;
  get_metadata : () -> (vec record { text; text }) query;
  get_monitoring_history : (GetMonitoringHistory) -> (
      vec record { MonitoringHistoryKey; MonitoringHistory },
    ) query;
  get_monitoring_status : () -> (MonitoringStatus) query;
  get_proposal : (nat) -> (opt Proposal) query;
  get_settings : () -> (opt MissionControlSettings) query;
  get_storage_config : () -> (StorageConfig) query;
  get_user : () -> (principal) query;
  get_user_data : () -> (User) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
      StreamingCallbackHttpResponse,
    ) query;
  icp_transfer : (TransferArgs) -> (Result);
  icrc_transfer : (principal, TransferArg) -> (Result_1);
  init_asset_upload : (InitAssetKey, nat) -> (InitUploadResult);
  init_proposal : (ProposalType) -> (nat, Proposal);
  list_assets : (text, ListParams) -> (ListResults) query;
  list_custom_domains : () -> (vec record { text; CustomDomain }) query;
  list_mission_control_controllers : () -> (
      vec record { principal; Controller },
    ) query;
  list_orbiters : () -> (vec record { principal; Orbiter }) query;
  list_satellites : () -> (vec record { principal; Satellite }) query;
  remove_mission_control_controllers : (vec principal) -> ();
  remove_satellites_controllers : (vec principal, vec principal) -> ();
  set_config : (opt Config) -> ();
  set_custom_domain : (text, opt text) -> ();
  set_metadata : (vec record { text; text }) -> ();
  set_mission_control_controllers : (vec principal, SetController) -> ();
  set_orbiter : (principal, opt text) -> (Orbiter);
  set_orbiter_metadata : (principal, vec record { text; text }) -> (Orbiter);
  set_orbiters_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  set_satellite : (principal, opt text) -> (Satellite);
  set_satellite_metadata : (principal, vec record { text; text }) -> (
      Satellite,
    );
  set_satellites_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  set_storage_config : (StorageConfig) -> ();
  start_monitoring : () -> ();
  stop_monitoring : () -> ();
  submit_proposal : (nat) -> (nat, Proposal);
  top_up : (principal, Tokens) -> ();
  unset_orbiter : (principal) -> ();
  unset_satellite : (principal) -> ();
  update_and_start_monitoring : (MonitoringStartConfig) -> ();
  update_and_stop_monitoring : (MonitoringStopConfig) -> ();
  upload_asset_chunk : (UploadChunk) -> (UploadChunkResult);
}
