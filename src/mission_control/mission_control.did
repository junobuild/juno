type Account = record { owner : principal; subaccount : opt blob };
type CanisterStatusType = variant { stopped; stopping; running };
type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin };
type CreateCanisterConfig = record {
  subnet_id : opt principal;
  name : opt text;
};
type CronJobStatusesConfig = record {
  enabled : bool;
  cycles_threshold : opt nat64;
};
type DepositCyclesArgs = record { cycles : nat; destination_id : principal };
type Orbiter = record {
  updated_at : nat64;
  orbiter_id : principal;
  metadata : vec record { text; text };
  created_at : nat64;
};
type Result = variant { Ok : nat64; Err : TransferError };
type Result_1 = variant { Ok : nat; Err : TransferError_1 };
type Result_2 = variant { Ok : SegmentStatus; Err : text };
type Satellite = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  satellite_id : principal;
};
type SegmentCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type SegmentCanisterStatus = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : SegmentCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
};
type SegmentStatus = record {
  id : principal;
  status : SegmentCanisterStatus;
  metadata : opt vec record { text; text };
  status_at : nat64;
};
type SegmentsStatuses = record {
  orbiters : opt vec Result_2;
  satellites : opt vec Result_2;
  mission_control : Result_2;
};
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type StatusesArgs = record {
  mission_control_cycles_threshold : opt nat64;
  orbiters : vec record { principal; CronJobStatusesConfig };
  satellites : vec record { principal; CronJobStatusesConfig };
  cycles_threshold : opt nat64;
};
type Timestamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type TransferArg = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferArgs = record {
  to : blob;
  fee : Tokens;
  memo : nat64;
  from_subaccount : opt blob;
  created_at_time : opt Timestamp;
  amount : Tokens;
};
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Tokens };
};
type TransferError_1 = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
service : () -> {
  add_mission_control_controllers : (vec principal) -> ();
  add_satellites_controllers : (vec principal, vec principal) -> ();
  create_orbiter : (opt text) -> (Orbiter);
  create_orbiter_with_config : (CreateCanisterConfig) -> (Orbiter);
  create_satellite : (text) -> (Satellite);
  create_satellite_with_config : (CreateCanisterConfig) -> (Satellite);
  del_mission_control_controllers : (vec principal) -> ();
  del_orbiter : (principal, nat) -> ();
  del_orbiters_controllers : (vec principal, vec principal) -> ();
  del_satellite : (principal, nat) -> ();
  del_satellites_controllers : (vec principal, vec principal) -> ();
  deposit_cycles : (DepositCyclesArgs) -> ();
  get_user : () -> (principal) query;
  icp_transfer : (TransferArgs) -> (Result);
  icrc_transfer : (principal, TransferArg) -> (Result_1);
  list_mission_control_controllers : () -> (
      vec record { principal; Controller },
    ) query;
  list_mission_control_statuses : () -> (vec record { nat64; Result_2 }) query;
  list_orbiter_statuses : (principal) -> (
      opt vec record { nat64; Result_2 },
    ) query;
  list_orbiters : () -> (vec record { principal; Orbiter }) query;
  list_satellite_statuses : (principal) -> (
      opt vec record { nat64; Result_2 },
    ) query;
  list_satellites : () -> (vec record { principal; Satellite }) query;
  remove_mission_control_controllers : (vec principal) -> ();
  remove_satellites_controllers : (vec principal, vec principal) -> ();
  set_metadata : (vec record { text; text }) -> ();
  set_mission_control_controllers : (vec principal, SetController) -> ();
  set_orbiter : (principal, opt text) -> (Orbiter);
  set_orbiter_metadata : (principal, vec record { text; text }) -> (Orbiter);
  set_orbiters_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  set_satellite : (principal, opt text) -> (Satellite);
  set_satellite_metadata : (principal, vec record { text; text }) -> (
      Satellite,
    );
  set_satellites_controllers : (
      vec principal,
      vec principal,
      SetController,
    ) -> ();
  status : (StatusesArgs) -> (SegmentsStatuses);
  top_up : (principal, Tokens) -> ();
  unset_orbiter : (principal) -> ();
  unset_satellite : (principal) -> ();
  version : () -> (text) query;
}
