type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin };
type CyclesBalance = record { timestamp : nat64; amount : nat };
type DeleteControllersArgs = record { controllers : vec principal };
type DepositedCyclesEmailNotification = record {
  to : text;
  deposited_cycles : CyclesBalance;
};
type Env = record { email_api_key : opt text };
type GetNotifications = record {
  to : opt nat64;
  from : opt nat64;
  segment_id : opt principal;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type NotificationKind = variant {
  DepositedCyclesEmail : DepositedCyclesEmailNotification;
};
type NotifyArgs = record {
  kind : NotificationKind;
  user : principal;
  segment : Segment;
};
type NotifyStatus = record { pending : nat64; sent : nat64; failed : nat64 };
type Segment = record {
  id : principal;
  metadata : opt vec record { text; text };
  kind : SegmentKind;
};
type SegmentKind = variant { Orbiter; MissionControl; Satellite };
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type SetControllersArgs = record {
  controller : SetController;
  controllers : vec principal;
};
type TransformArgs = record { context : blob; response : HttpResponse };
service : () -> {
  del_controllers : (DeleteControllersArgs) -> ();
  get_notify_status : (GetNotifications) -> (NotifyStatus) query;
  list_controllers : () -> (vec record { principal; Controller }) query;
  notify : (NotifyArgs) -> ();
  ping : (NotifyArgs) -> ();
  set_controllers : (SetControllersArgs) -> ();
  set_env : (Env) -> ();
  transform : (TransformArgs) -> (HttpResponse) query;
  version : () -> (text) query;
}
