type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin; Submit };
type CyclesBalance = record { timestamp : nat64; amount : nat };
type DeleteControllersArgs = record { controllers : vec principal };
type DepositedCyclesEmailNotification = record {
  to : text;
  deposited_cycles : CyclesBalance;
};
type Env = record { email_api_key : opt text };
type FailedCyclesDepositEmailNotification = record {
  to : text;
  funding_failure : FundingFailure;
};
type FundingErrorCode = variant {
  BalanceCheckFailed;
  ObtainCyclesFailed;
  DepositFailed;
  InsufficientCycles;
  Other : text;
};
type FundingFailure = record {
  timestamp : nat64;
  error_code : FundingErrorCode;
};
type GetNotifications = record {
  to : opt nat64;
  from : opt nat64;
  segment_id : opt principal;
};
type GetOpenIdCertificate = record { provider : OpenIdProvider };
type Jwk = record {
  alg : opt text;
  kid : opt text;
  kty : JwkType;
  params : JwkParams;
};
type JwkParams = variant {
  Ec : JwkParamsEc;
  Oct : JwkParamsOct;
  Okp : JwkParamsOkp;
  Rsa : JwkParamsRsa;
};
type JwkParamsEc = record { x : text; y : text; crv : text };
type JwkParamsOct = record { k : text };
type JwkParamsOkp = record { x : text; crv : text };
type JwkParamsRsa = record { e : text; n : text };
type JwkType = variant { EC; OKP; RSA; oct };
type Jwks = record { keys : vec Jwk };
type NotificationKind = variant {
  DepositedCyclesEmail : DepositedCyclesEmailNotification;
  FailedCyclesDepositEmail : FailedCyclesDepositEmailNotification;
};
type NotifyArgs = record {
  kind : NotificationKind;
  user : principal;
  segment : Segment;
};
type NotifyStatus = record { pending : nat64; sent : nat64; failed : nat64 };
type OpenIdCertificate = record {
  updated_at : nat64;
  jwks : Jwks;
  created_at : nat64;
  version : opt nat64;
  expires_at : opt nat64;
};
type OpenIdProvider = variant { Google };
type Segment = record {
  id : principal;
  metadata : opt vec record { text; text };
  kind : SegmentKind;
};
type SegmentKind = variant { Orbiter; MissionControl; Satellite };
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type SetControllersArgs = record {
  controller : SetController;
  controllers : vec principal;
};
service : () -> {
  del_controllers : (DeleteControllersArgs) -> ();
  get_notify_status : (GetNotifications) -> (NotifyStatus) query;
  get_openid_certificate : (GetOpenIdCertificate) -> (
      opt OpenIdCertificate,
    ) query;
  list_controllers : () -> (vec record { principal; Controller }) query;
  notify : (NotifyArgs) -> ();
  ping : (NotifyArgs) -> ();
  set_controllers : (SetControllersArgs) -> ();
  set_env : (Env) -> ();
  start_openid_monitoring : () -> ();
  stop_openid_monitoring : () -> ();
}
