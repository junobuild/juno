type AnalyticKey = record { key : text; collected_at : nat64 };
type AnalyticsBrowsersPageViews = record {
  safari : float64;
  opera : float64;
  others : float64;
  firefox : float64;
  chrome : float64;
};
type AnalyticsClientsPageViews = record {
  browsers : AnalyticsBrowsersPageViews;
  devices : AnalyticsDevicesPageViews;
};
type AnalyticsDevicesPageViews = record {
  desktop : float64;
  others : float64;
  mobile : float64;
};
type AnalyticsMetricsPageViews = record {
  bounce_rate : float64;
  average_page_views_per_session : float64;
  daily_total_page_views : vec record { CalendarDate; nat32 };
  total_page_views : nat32;
  unique_page_views : nat64;
  unique_sessions : nat64;
};
type AnalyticsTop10PageViews = record {
  referrers : vec record { text; nat32 };
  pages : vec record { text; nat32 };
};
type AnalyticsTrackEvents = record { total : vec record { text; nat32 } };
type AnalyticsWebVitalsPageMetrics = record {
  cls : opt float64;
  fcp : opt float64;
  inp : opt float64;
  lcp : opt float64;
  ttfb : opt float64;
};
type AnalyticsWebVitalsPerformanceMetrics = record {
  overall : AnalyticsWebVitalsPageMetrics;
  pages : vec record { text; AnalyticsWebVitalsPageMetrics };
};
type CalendarDate = record { day : nat8; month : nat8; year : int32 };
type Controller = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  scope : ControllerScope;
  expires_at : opt nat64;
};
type ControllerScope = variant { Write; Admin };
type DelSatelliteConfig = record { version : opt nat64 };
type DeleteControllersArgs = record { controllers : vec principal };
type DepositCyclesArgs = record { cycles : nat; destination_id : principal };
type GetAnalytics = record {
  to : opt nat64;
  from : opt nat64;
  satellite_id : opt principal;
};
type MemorySize = record { stable : nat64; heap : nat64 };
type NavigationType = variant {
  Navigate;
  Restore;
  Reload;
  BackForward;
  BackForwardCache;
  Prerender;
};
type OrbiterSatelliteConfig = record {
  updated_at : nat64;
  features : opt OrbiterSatelliteFeatures;
  created_at : nat64;
  version : opt nat64;
};
type OrbiterSatelliteFeatures = record {
  performance_metrics : bool;
  track_events : bool;
  page_views : bool;
};
type PageView = record {
  title : text;
  updated_at : nat64;
  referrer : opt text;
  time_zone : text;
  session_id : text;
  href : text;
  created_at : nat64;
  satellite_id : principal;
  device : PageViewDevice;
  version : opt nat64;
  user_agent : opt text;
};
type PageViewDevice = record { inner_height : nat16; inner_width : nat16 };
type PerformanceData = variant { WebVitalsMetric : WebVitalsMetric };
type PerformanceMetric = record {
  updated_at : nat64;
  session_id : text;
  data : PerformanceData;
  href : text;
  metric_name : PerformanceMetricName;
  created_at : nat64;
  satellite_id : principal;
  version : opt nat64;
};
type PerformanceMetricName = variant { CLS; FCP; INP; LCP; TTFB };
type Result = variant { Ok : PageView; Err : text };
type Result_1 = variant { Ok; Err : vec record { AnalyticKey; text } };
type Result_2 = variant { Ok : PerformanceMetric; Err : text };
type Result_3 = variant { Ok : TrackEvent; Err : text };
type SetController = record {
  metadata : vec record { text; text };
  scope : ControllerScope;
  expires_at : opt nat64;
};
type SetControllersArgs = record {
  controller : SetController;
  controllers : vec principal;
};
type SetPageView = record {
  title : text;
  updated_at : opt nat64;
  referrer : opt text;
  time_zone : text;
  session_id : text;
  href : text;
  satellite_id : principal;
  device : PageViewDevice;
  version : opt nat64;
  user_agent : opt text;
};
type SetPerformanceMetric = record {
  session_id : text;
  data : PerformanceData;
  href : text;
  metric_name : PerformanceMetricName;
  satellite_id : principal;
  version : opt nat64;
  user_agent : opt text;
};
type SetSatelliteConfig = record {
  features : opt OrbiterSatelliteFeatures;
  version : opt nat64;
};
type SetTrackEvent = record {
  updated_at : opt nat64;
  session_id : text;
  metadata : opt vec record { text; text };
  name : text;
  satellite_id : principal;
  version : opt nat64;
  user_agent : opt text;
};
type TrackEvent = record {
  updated_at : nat64;
  session_id : text;
  metadata : opt vec record { text; text };
  name : text;
  created_at : nat64;
  satellite_id : principal;
  version : opt nat64;
};
type WebVitalsMetric = record {
  id : text;
  value : float64;
  navigation_type : opt NavigationType;
  delta : float64;
};
service : () -> {
  del_controllers : (DeleteControllersArgs) -> (
      vec record { principal; Controller },
    );
  del_satellite_config : (principal, DelSatelliteConfig) -> ();
  deposit_cycles : (DepositCyclesArgs) -> ();
  get_page_views : (GetAnalytics) -> (
      vec record { AnalyticKey; PageView },
    ) query;
  get_page_views_analytics_clients : (GetAnalytics) -> (
      AnalyticsClientsPageViews,
    ) query;
  get_page_views_analytics_metrics : (GetAnalytics) -> (
      AnalyticsMetricsPageViews,
    ) query;
  get_page_views_analytics_top_10 : (GetAnalytics) -> (
      AnalyticsTop10PageViews,
    ) query;
  get_performance_metrics : (GetAnalytics) -> (
      vec record { AnalyticKey; PerformanceMetric },
    ) query;
  get_performance_metrics_analytics_web_vitals : (GetAnalytics) -> (
      AnalyticsWebVitalsPerformanceMetrics,
    ) query;
  get_track_events : (GetAnalytics) -> (
      vec record { AnalyticKey; TrackEvent },
    ) query;
  get_track_events_analytics : (GetAnalytics) -> (AnalyticsTrackEvents) query;
  list_controllers : () -> (vec record { principal; Controller }) query;
  list_satellite_configs : () -> (
      vec record { principal; OrbiterSatelliteConfig },
    ) query;
  memory_size : () -> (MemorySize) query;
  set_controllers : (SetControllersArgs) -> (
      vec record { principal; Controller },
    );
  set_page_view : (AnalyticKey, SetPageView) -> (Result);
  set_page_views : (vec record { AnalyticKey; SetPageView }) -> (Result_1);
  set_performance_metric : (AnalyticKey, SetPerformanceMetric) -> (Result_2);
  set_performance_metrics : (
      vec record { AnalyticKey; SetPerformanceMetric },
    ) -> (Result_1);
  set_satellite_configs : (vec record { principal; SetSatelliteConfig }) -> (
      vec record { principal; OrbiterSatelliteConfig },
    );
  set_track_event : (AnalyticKey, SetTrackEvent) -> (Result_3);
  set_track_events : (vec record { AnalyticKey; SetTrackEvent }) -> (Result_1);
  version : () -> (text) query;
}
